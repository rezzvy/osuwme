class MationHTML{constructor(){this.rules=[]}#a=null;#b=[];set noRuleFallback(t){if("function"!=typeof t)throw Error("Given callback should be a function.");this.#a=t}set ignoreTags(t){if(!Array.isArray(t))throw Error("Given tags should be an array of strings.");for(let e of t){if("string"!=typeof e)throw Error("Each tag should be a string.");let o=e.toLowerCase();this.#b.includes(o)||this.#b.push(o)}}register(t){if(Array.isArray(t)){for(let e of t)this.#c(e);this.rules.push(...t)}else this.#c(t),this.rules.push(t)}convert(t,e=!0){if("string"!=typeof t)throw Error("Input must be a string.");let o=new DOMParser,a=o.parseFromString(t,"text/html");return e?this.#d(a.body):this.#d(a.documentElement)}#d(t){let e="";for(let o of t.childNodes)if(o.nodeType===Node.TEXT_NODE)e+=o.textContent;else if(o.nodeType===Node.ELEMENT_NODE){if(this.#b.includes(o.tagName.toLowerCase()))continue;e+=this.#e(o)}return e}#e(a){let r=a.tagName.toLowerCase(),s=this.rules.find(t=>t.tag===r),n=this.#d(a),i={};for(let l of a.attributes)i[l.name]=l.value;return s?s.format?s.format({node:a,content:n,dataset:i}):s.to.replace(/{dataset\.([\w-]+)}/g,(t,e)=>i[e]||"").replace(/{content}/g,n):this.#a&&"function"==typeof this.#a?this.#a({node:a,content:n,dataset:i}):(console.warn(`No rule found for tag: <${r}>`),n)}#c(u){if("object"!=typeof u||!u.tag||!(u.to||u.format))throw Error('Invalid rule: Must have a "tag" and a "format" or "to".')}}